### 2025-Oct-28

### Wrapper function for reconstructing the ancestral states for an entire discrete character matrix. This function uses ace() from the 'ape' package.
### Maximum likelihood is only option for estimating ancestral states for discrete characters. Currently, only an equal rates model of character state evolution is available for this function.
### This function opts for marginal likelihood = FALSE, which has been pointed out by L. Revell that it actually generates marginal likelihood scores (see https://blog.phytools.org/2015/05/about-how-acemarginaltrue-does-not.html)
### A major drawback for this function is how polymorphic character scorings are treated. The ace function does not deal with polymorphic states. It can deal with missing data (encoded as NA).
### Here, polymorphisms are converted to ambiguities and all amgiguities (and gap scores) are treated as missing data (NA).
### This could be improved in the future by a new custom function that works with the phangorn PhyDat object, where polymorphisms are encoded using a contrast matrix.
### Another caveat is that ordered characters are ignored.

# Arguments:
# matrix - discrete character matrix
# tree - phylogenetic tree of the class 'phylo'. Has to be fully bifurcating.
# model - current only option for working code is equal rates "ER"
# marginal - whether marginal likelihood should be estimated - currenlty set to FALSE, which inadvertently uses the entire tree to estimate likelihoods and gives marginal likelihood scores. See details of ace() in 'ape' for arguments.

anc.discrete <- function(matrix, tree, model="ER", marginal=FALSE){

# Matrix needs to have no polymophisms or uncertainties, and ambiguities need to be specified as NA

matrix <- poly.to.amb(matrix)
matrix[matrix == "-"] <- "?"
matrix[matrix == "?"] <- NA

# Subfunction to reconstruct ancestral state for each character.

anc.discrete.char <- function(char, tree, model="ER", marginal=FALSE){
	
	char <- as.factor(char)
	
	# Anc state reconstruction for one character in the matrix
	anc <- ace(char, tree, type="discrete", method="ML", model="ER", marginal=FALSE)
	
	liks <- anc$lik.anc
	
	anc_nodes <- cbind(liks, c(seq(1:dim(liks)[1])))
anc_nodes <- anc_nodes[,-c(1:dim(liks)[2])]

# Select the character state with the highest probability for each node (ancestor).
for(i in 1:length(anc_nodes)){
	anc_nodes[[i]] <- as.numeric(names(which.max(liks[i,])))
}

return(anc_nodes)

}

# Reconstruct ancestral states for every character in the matrix.
nodes <- c()
for(j in 1:dim(matrix)[2]){
	
	nodes[[j]] <- anc.discrete.char(matrix[,j], tree, model="ER", marginal=FALSE)
	
}
anc_states <- matrix(unlist(nodes), ncol=length(nodes), byrow=FALSE)
row.names(anc_states) <- as.character(c(1:(length(tree$tip.label)-1)+length(tree$tip.label)))


# Returns a matrix of ancestral character states for each node, ordered in the same order as specified in the tree (phylo object).
return(anc_states)

}
